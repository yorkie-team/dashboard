@use './mixins-lib';
@use './variables';
@use './color';
@use './font';
@use 'sass:list';
@use 'sass:map';

body,
p,
h1,
h2,
h3,
h4,
h5,
h6,
ul,
ol,
li,
dl,
dt,
dd,
table,
th,
td,
form,
fieldset,
legend,
input,
textarea,
button,
select {
  margin: 0;
  padding: 0;
}

html,
body {
  height: 100%;
}

html {
  font-size: mixins-lib.$root-em * 1px;

  @if (variables.$initial-line-height != 'normal') {
    line-height: mixins-lib.$root-em * 1px;
  }
}

body {
  -webkit-overflow-scrolling: touch;
  @include mixins-lib.rfonts(variables.$initial-font-size, variables.$initial-line-height, 400);
  font-family: variables.$font-family-common;
  overflow: overlay;
}

html,
body,
code,
kbd,
pre,
samp {
  font-family: variables.$font-family-common;
}

article,
aside,
dialog,
header,
section,
nav,
figure,
main {
  display: block;
}

pre {
  word-wrap: break-word;
}

em,
address {
  font-style: normal;
}

img,
fieldset {
  border: 0;
}

ul,
ol,
dl {
  list-style: none;
  padding-left: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

button,
input,
optgroup,
select,
textarea {
  color: inherit;

  // Initialize line-height to normal
  @if (variables.$initial-line-height == 'normal') {
    line-height: normal;
  }
}

button {
  border: transparent;
  background-color: transparent;
  cursor: pointer;
}

button,
a {
  &:focus-visible {
    outline: 1px solid var(--orange-0);
  }
}

.blind {
  @extend %visuallyhidden;
}

// color
$palette: (
  'gray': (
    '900': var(--gray-900),
    '800': var(--gray-800),
    '700': var(--gray-700),
    '600': var(--gray-600),
    '500': var(--gray-500),
    '400': var(--gray-400),
    '300': var(--gray-300),
    '200': var(--gray-200),
    '50': var(--gray-50),
    '000': var(--gray-000),
  ),
  'orange': (
    'dark': var(--orange-dark),
    '0': var(--orange-0),
    'light': var(--orange-light),
    'alpha_dark': var(--orange-alpha-dark),
    'alpha_0': var(--orange-alpha-0),
    'alpha_light': var(--orange-alpha-light),
  ),
  'yellow': (
    'dark': var(--yellow-dark),
    '0': var(--yellow-0),
    'light': var(--yellow-light),
    'alpha_dark': var(--yellow-alpha-dark),
    'alpha_0': var(--yellow-alpha-0),
    'alpha_light': var(--yellow-alpha-light),
  ),
  'green': (
    'dark': var(--green-dark),
    '0': var(--green-0),
    'light': var(--green-light),
    'alpha_dark': var(--green-alpha-dark),
    'alpha_0': var(--green-alpha-0),
    'alpha_light': var(--green-alpha-light),
  ),
  'blue': (
    'dark': var(--blue-dark),
    '0': var(--blue-0),
    'light': var(--blue-light),
    'alpha_dark': var(--blue-alpha-dark),
    'alpha_0': var(--blue-alpha-0),
    'alpha_light': var(--blue-alpha-light),
  ),
  'red': (
    'dark': var(--red-dark),
    '0': var(--red-0),
    'light': var(--red-light),
    'alpha_dark': var(--red-alpha-dark),
    'alpha_0': var(--red-alpha-0),
    'alpha_light': var(--red-alpha-light),
  ),
  'purple': (
    'dark': var(--purple-dark),
    '0': var(--purple-0),
    'light': var(--purple-light),
    'alpha_dark': var(--purple-alpha-dark),
    'alpha_0': var(--purple-alpha-0),
    'alpha_light': var(--purple-alpha-light),
  ),
);

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

.white {
  color: variables.$white;

  &_bg {
    background-color: variables.$white;
  }
}

@each $name, $value in map-deep-get($palette, 'gray') {
  .gray#{$name} {
    color: $value;
  }
  .gray#{$name}_bg {
    background-color: $value;
  }
}
@each $name, $value in map-deep-get($palette, 'orange') {
  .orange_#{$name} {
    color: $value;
  }
  .orange_#{$name}_bg {
    background-color: $value;
  }
}
@each $name, $value in map-deep-get($palette, 'yellow') {
  .yellow_#{$name} {
    color: $value;
  }
  .yellow_#{$name}_bg {
    background-color: $value;
  }
}
@each $name, $value in map-deep-get($palette, 'green') {
  .green_#{$name} {
    color: $value;
  }
  .green_#{$name}_bg {
    background-color: $value;
  }
}
@each $name, $value in map-deep-get($palette, 'blue') {
  .blue_#{$name} {
    color: $value;
  }
  .blue_#{$name}_bg {
    background-color: $value;
  }
}
@each $name, $value in map-deep-get($palette, 'red') {
  .red_#{$name} {
    color: $value;
  }
  .red_#{$name}_bg {
    background-color: $value;
  }
}
@each $name, $value in map-deep-get($palette, 'purple') {
  .purple_#{$name} {
    color: $value;
  }
  .purple_#{$name}_bg {
    background-color: $value;
  }
}

// Gradient
$gradient: (
  '90deg': (
    'yellow': variables.$gradient_90deg_yellow,
    'orange': variables.$gradient_90deg_orange,
    'red': variables.$gradient_90deg_red,
    'purple': variables.$gradient_90deg_purple,
    'blue': variables.$gradient_90deg_blue,
    'green': variables.$gradient_90deg_green,
    'gray1': variables.$gradient_90deg_gray1,
    'gray2': variables.$gradient_90deg_gray2,
    'gray3': variables.$gradient_90deg_gray3,
    'gray4': variables.$gradient_90deg_gray4,
  ),
  '180deg': (
    'yellow': variables.$gradient_180deg_yellow,
    'orange': variables.$gradient_180deg_orange,
    'red': variables.$gradient_180deg_red,
    'purple': variables.$gradient_180deg_purple,
    'blue': variables.$gradient_180deg_blue,
    'green': variables.$gradient_180deg_green,
    'gray1': variables.$gradient_180deg_gray1,
    'gray2': variables.$gradient_180deg_gray2,
    'gray3': variables.$gradient_180deg_gray3,
    'gray4': variables.$gradient_180deg_gray4,
  ),
);

@each $color, $value in map-deep-get($gradient, '90deg') {
  .gradient_90deg_#{$color} {
    background-image: $value;
  }
}
@each $color, $value in map-deep-get($gradient, '180deg') {
  .gradient_180deg_#{$color} {
    background-image: $value;
  }
}

// Shadow
$shadow: (
  'xs': variables.$shadow_xs,
  's': variables.$shadow_s,
  'm': variables.$shadow_m,
  'l': variables.$shadow_l,
);

@each $size, $value in $shadow {
  .shadow_#{$size} {
    box-shadow: $value;
  }
}

// layout
#root,
#__next {
  height: 100%;
}

.wrap {
  display: flex;
  flex-direction: column;
  flex: 1 1 auto;
  width: 100%;
  min-width: 320px;
  min-height: 100%;
  background-color: var(--gray-000);

  @include mixins-lib.tabletStart() {
    overflow: initial;
  }
}

.container {
  display: flex;
  flex-direction: column;
  flex: 1 1 auto;
  position: relative;
  width: 100%;

  @media screen and (orientation: landscape) {
    box-sizing: border-box;

    @supports (padding: env(safe-area-inset-right)) {
      padding: 0 calc(env(safe-area-inset-right)) 0 calc(env(safe-area-inset-left));
    }

    @supports (padding: constant(safe-area-inset-right)) {
      padding: 0 calc(constant(safe-area-inset-right)) 0 calc(constant(safe-area-inset-left));
    }
  }
}
@include mixins-lib.setScrollbar(orange);

// Dimmed
.dimmed {
  @include mixins-lib.fixedFull();
  z-index: variables.$z_dimmed;
  background-color: var(--gray-900);
  opacity: 0.24;
}

// Br
.br_pc {
  display: block;

  @include mixins-lib.tabletStart() {
    display: none;
  }
}

.br_tablet {
  display: none;

  @include mixins-lib.tabletStart() {
    display: block;
  }

  @include mixins-lib.mobileStart() {
    display: none;
  }
}

.br_mo {
  display: none;

  @include mixins-lib.mobileStart() {
    display: block;
  }

  @include mixins-lib.mobileXS() {
    display: none;
  }
}

.br_mo_xs {
  display: none;

  @include mixins-lib.mobileXS() {
    display: block;
  }
}
