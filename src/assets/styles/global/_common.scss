@charset "utf-8";
@use "../global/mixins-lib";
@use "../global/variables";
@use "../global/color";
@use "../global/font";
@use "sass:list";
@use "sass:map";

* {
  -webkit-tap-highlight-color: rgb(0 0 0 / 0%);
  -webkit-focus-ring-color: rgb(0 0 0 / 0%);
}

*:not(input):not(textarea) {
  -webkit-touch-callout: none; // disable the IOS popup when long-press on a link
  user-select: none;
}

body,
p,
h1,
h2,
h3,
h4,
h5,
h6,
ul,
ol,
li,
dl,
dt,
dd,
table,
th,
td,
form,
fieldset,
legend,
input,
textarea,
button,
select {
  margin: 0;
  padding: 0;
}

body,
input,
textarea,
select,
button,
table {
  outline: none !important;
}

html,
body {
  height: 100%;
  background-color: var(--gray-000);
}

html {
  font-size: mixins-lib.$root-em * 1px;

  @if (variables.$initial-line-height != "normal") {
    line-height: mixins-lib.$root-em * 1px;
  }
}

body {
  -webkit-overflow-scrolling: touch;
  user-select: none;
  @include mixins-lib.rfonts(variables.$initial-font-size, variables.$initial-line-height, 400);
  font-family: variables.$font-family-common;
  overflow: overlay;
  background-color: var(--gray-000);
}

html,
body,
code,
kbd,
pre,
samp {
  font-family: variables.$font-family-common;
}

article,
aside,
dialog,
header,
section,
nav,
figure,
main {
  display: block;
}

pre {
  white-space: pre-wrap;
  word-wrap: break-word;
}

em,
address {
  font-style: normal;
}

img,
fieldset {
  border: 0;
}

ul,
ol,
dl {
  list-style: none;
  padding-left: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

// line-height: normal로 초기화
button,
input,
optgroup,
select,
textarea {
  color: inherit;

  @if (variables.$initial-line-height == "normal") {
    line-height: normal;
  }
}

button {
  border: transparent;
  background-color: transparent;
  cursor: pointer;
}

legend,
.blind {
  @extend %visuallyhidden;
}

legend {
  display: block;
  max-width: none;
}

// color
$palette: (
  "gray": (
    "900": var(--gray-900),
    "800": var(--gray-800),
    "700": var(--gray-700),
    "600": var(--gray-600),
    "500": var(--gray-500),
    "400": var(--gray-400),
    "300": var(--gray-300),
    "200": var(--gray-200),
    "50": var(--gray-50),
    "000": var(--gray-000),
  ),
  "orange": (
    "dark": var(--orange-dark),
    "0": var(--orange-0),
    "light": var(--orange-light),
    "alpha_dark": var(--orange-alpha-dark),
    "alpha_0": var(--orange-alpha-0),
    "alpha_light": var(--orange-alpha-light)
  ),
  "yellow": (
    "dark": var(--yellow-dark),
    "0": var(--yellow-0),
    "light": var(--yellow-light),
    "alpha_dark": var(--yellow-alpha-dark),
    "alpha_0": var(--yellow-alpha-0),
    "alpha_light": var(--yellow-alpha-light)
  ),
  "green": (
    "dark": var(--green-dark),
    "0": var(--green-0),
    "light": var(--green-light),
    "alpha_dark": var(--green-alpha-dark),
    "alpha_0": var(--green-alpha-0),
    "alpha_light": var(--green-alpha-light)
  ),
  "blue": (
    "dark": var(--blue-dark),
    "0": var(--blue-0),
    "light": var(--blue-light),
    "alpha_dark": var(--blue-alpha-dark),
    "alpha_0": var(--blue-alpha-0),
    "alpha_light": var(--blue-alpha-light)
  ),
  "red": (
    "dark": var(--red-dark),
    "0": var(--red-0),
    "light": var(--red-light),
    "alpha_dark": var(--red-alpha-dark),
    "alpha_0": var(--red-alpha-0),
    "alpha_light": var(--red-alpha-light)
  ),
  "purple": (
    "dark": var(--purple-dark),
    "0": var(--purple-0),
    "light": var(--purple-light),
    "alpha_dark": var(--purple-alpha-dark),
    "alpha_0": var(--purple-alpha-0),
    "alpha_light": var(--purple-alpha-light)
  )
);

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

.white {
  color: variables.$white;

  &_bg {
    background-color: variables.$white;
  }
}

@each $name, $value in map-deep-get($palette, "gray") {
  .gray#{$name} {
    color: $value;
  }
  .gray#{$name}_bg {
    background-color: $value;
  }
}
@each $name, $value in map-deep-get($palette, "orange") {
  .orange_#{$name} {
    color: $value;
  }
  .orange_#{$name}_bg {
    background-color: $value;
  }
}
@each $name, $value in map-deep-get($palette, "yellow") {
  .yellow_#{$name} {
    color: $value;
  }
  .yellow_#{$name}_bg {
    background-color: $value;
  }
}
@each $name, $value in map-deep-get($palette, "green") {
  .green_#{$name} {
    color: $value;
  }
  .green_#{$name}_bg {
    background-color: $value;
  }
}
@each $name, $value in map-deep-get($palette, "blue") {
  .blue_#{$name} {
    color: $value;
  }
  .blue_#{$name}_bg {
    background-color: $value;
  }
}
@each $name, $value in map-deep-get($palette, "red") {
  .red_#{$name} {
    color: $value;
  }
  .red_#{$name}_bg {
    background-color: $value;
  }
}
@each $name, $value in map-deep-get($palette, "purple") {
  .purple_#{$name} {
    color: $value;
  }
  .purple_#{$name}_bg {
    background-color: $value;
  }
}

// Gradient
$gradient: (
  "90deg": (
    "yellow": variables.$gradient_90deg_yellow,
    "orange": variables.$gradient_90deg_orange,
    "red": variables.$gradient_90deg_red,
    "purple": variables.$gradient_90deg_purple,
    "blue": variables.$gradient_90deg_blue,
    "green": variables.$gradient_90deg_green,
    "gray1": variables.$gradient_90deg_gray1,
    "gray2": variables.$gradient_90deg_gray2,
    "gray3": variables.$gradient_90deg_gray3,
    "gray4": variables.$gradient_90deg_gray4,
  ),
  "180deg": (
    "yellow": variables.$gradient_180deg_yellow,
    "orange": variables.$gradient_180deg_orange,
    "red": variables.$gradient_180deg_red,
    "purple": variables.$gradient_180deg_purple,
    "blue": variables.$gradient_180deg_blue,
    "green": variables.$gradient_180deg_green,
    "gray1": variables.$gradient_180deg_gray1,
    "gray2": variables.$gradient_180deg_gray2,
    "gray3": variables.$gradient_180deg_gray3,
    "gray4": variables.$gradient_180deg_gray4,
  )
);

@each $color, $value in map-deep-get($gradient, "90deg") {
  .gradient_90deg_#{$color} {
    background-image: $value;
  }
}
@each $color, $value in map-deep-get($gradient, "180deg") {
  .gradient_180deg_#{$color} {
    background-image: $value;
  }
}

// Shadow
$shadow: (
  "xs": variables.$shadow_xs,
  "s": variables.$shadow_s,
  "m": variables.$shadow_m,
  "l": variables.$shadow_l
);

@each $size, $value in $shadow {
  .shadow_#{$size} {
    box-shadow: $value;
  }
}

// layout
#root {
  height: 100%;
}

.wrap {
  display: flex;
  overflow: hidden;
  flex-direction: column;
  flex: 1 1 auto;
  width: 100%;
  min-width: 320px;
  min-height: 100%;

  @include mixins-lib.tabletStart() {
    overflow: initial;
  }
}

.container {
  display: flex;
  flex-direction: column;
  flex: 1 1 auto;
  position: relative;
  width: 100%;
}
@include mixins-lib.setScrollbar(orange);

// Dimmed
.dimmed {
  @include mixins-lib.fixedFull();
  z-index: 30;
  background-color: rgb(0 0 0 / 25%);
}

// Br
.br_pc {
  display: block;

  @include mixins-lib.tabletStart() {
    display: none;
  }
}

.br_mo {
  display: none;

  @include mixins-lib.tabletStart() {
    display: block;
  }
}

.btn_top {
  display: none;

  @include mixins-lib.tabletStart() {
    display: block;
    position: fixed;
    bottom: 24px;
    right: 24px;
    margin: 0;
    padding: 0;
    border: none;
    background-color: transparent;
  }

  .icon {
    @include mixins-lib.tabletStart() {
      width: 32px;
      height: 32px;
      margin: 0;
    }
  }
}
